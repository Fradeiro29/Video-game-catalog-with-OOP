Viernes 26 de mayo

	Corrección 1: 
		Sub-Competencia: Tecnologías SEG0702A

		Error original: Describí mi proyecto como un proyecto de escuela y no agregué información detallada en el readme.

		Cambio realizado: Reescribi el archivo readme más detallada y sin mencionar proyecto de escuela.

		Líneas de código donde se ve la corrección: Corrección en el archivo README.md


Viernes 2 de junio

	Corrección 1:
		Sub-Competencia: Evaluación del problema SICT0301A

		Error original: Errores en el UML: flecha para denotar herencia incorrecta, atributos de clase Videjuego como privado, elementos repetidos en sub-clases y sub-clases innecesarias. 

		Cambio realizado: Modifiqué la flecha para herencia por la correcta, cambie el modificador de acceso de los atributos de la clase Videjuego por protegido y eliminé la idea de una clase aparte para subgénero, creé dos nuevas subclases que derivan de Videojuego.

		Líneas de código donde se ve la corrección: Corrección en el archivo UML_catalogo_de_videjuegos.pdf
	
	Corrección 2:
		Sub-Competencia: Implementa SICT0303A

		Error original: No separé el código por clases (uso de headers), errores mencionados en la corrección 1 pero en la parte del código.

		Cambio realizado: Separé el código por clases en headers e hice los cambios presentes en el nuevo UML en el código.

		Líneas de código donde se ve la corrección: En catalogo_de_videjuegos.cpp en las lineas 6-10 se ven los #include de los headers de la superclase abstracta y la subclase. 
			Se agregaron nuevos archivos headers (.h): PcVideojuego.h, ConsolaVideojuego.h, Videojuego.h, Critica.h, Rendimiento.h, Computadora.h.


Sabado 10 de junio
	
	Corrección 1:
		Sub-Competencia: Evaluación del problema SICT0301A
		
		Error original: No modifiqué el diagrama de clases acorde a los nuevos cambios en mi código. Videojuego ya era abstracta en mi código pero no en el UML. Las clases de mi código no correspondían con mi UML.

		Cambio realizado: Arreglé, actualicé y complete el UML con todos los atributos, métodos y constructores que se definen en el código. 

		Líneas de código donde se ve la corrección: La corrección se puede apreciar directamente en el archivo de UML.

	Corrección 2:
		Sub-Competencia: Implementa SICT0303A
		
		Error original: Definí más no implementé polimorfismo en mis clases. Solo definí las clases.

		Cambio realizado: El polimorfismo ya está correctamente implementado y funcional. Se creó un vector que guarda punteros de clase Videojuego.A través de ese vector el usuario puede crear objetos de las subclases. 

		Líneas de código donde se ve la corrección: En el .cpp linea 16 se aprecía el vector para emplear polimorfismo. En las líneas 126 y 223 se pueden apreciar la creación de objetos con parámetros de polimorfismo a partir del vector de punteros Videojuego.
